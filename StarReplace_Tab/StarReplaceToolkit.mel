//--------------------------------------------------------------------------
//procedure to convert paint effects, create replacement geometry, delete converted surface
//--------------------------------------------------------------------------

global proc lbs_replaceStrokes()
{
//puts paint effects stroke into a variable
$lbs_paintEffectsStroke = `ls -sl`;

//converts paint effects to nurbs surfaces and selects them
	doPaintEffectsToNurbs(1);
	print("--Paint Effects Converted" + "\n");
	SelectAllNURBSSurfaces;
	print("--Converted NURBS Surfaces Selected" + "\n");

//-------------------------------------------------------------------------------------------
//adds selected surfaces into an array, size command gets number of surfaces in array for looping, $lbs_subDivVal 
//get the user specified subdivision levels for replacement geometry
//---------------------------------------------------------------------------------------

	string $lbs_convertedStrokes[] = `ls -sl`;
	int $surfaceAmount = `size($lbs_convertedStrokes)`;
	print("--paint effects converted into " + $surfaceAmount + " surfaces" + "\n");
	int $lbs_subDivVal = `intSliderGrp -query -value subDivVal`;

//checks if replacementGeometryGrp exists - if it doesn't group gets created
	int $lbs_grpCheck = `objExists replacementGeometryGrp`;
	if( $lbs_grpCheck == 0 )
		{
		group -n "replacementGeometryGrp" -em;
		print("--replacementGeometryGrp created" + "\n");
		}
	else
		{
		print("--replacementGeometryGrp already exists" + "\n");
		}


//children of replacementGeometryGrp put in an array and the size of that array will be used in the renaming of replacement geometry
//so, if there are 5 children size comes back as 5. in the for loop one is added to $lbs_groupSize and the next sphere created is named
//replace6
	string $lbs_groupArray[] = `listRelatives "replacementGeometryGrp"`;
	$lbs_groupSize = `size($lbs_groupArray)`;

//user min and max value from window
	float $lbs_minVal = `floatFieldGrp -query -v1 minVal`;
	float $lbs_maxVal = `floatFieldGrp -query -v1 maxVal`;

//-------------------------------------------------------------------------
//shader creation begin
//------------------------------------------------------------------------

	string $lbs_starShader;
	string $lbs_solidFractal;
	string $lbs_place3d;
	string $lbs_starSG;

	int $lbs_shaderCheck = `objExists starTwinkle_Shader`;
	int $lbs_fractalCheck = `objExists solidFractal1`;
	int $lbs_3dCheck = `objExists place3dTexture1`;
	int $lbs_SGCheck = `objExists starTwinkle_ShaderSG`;

	print("---shader exists: " + $lbs_shaderCheck + "\n");
	print("---fractal exists: " + $lbs_fractalCheck + "\n");
	print("---3d node exists: " + $lbs_3dCheck + "\n");
	print("---SG exists: " + $lbs_SGCheck + "\n");

	if($lbs_shaderCheck == 0) 
	{
		$lbs_starShader = `shadingNode -asShader lambert`;
		$lbs_starShader = `rename $lbs_starShader "starTwinkle_Shader"`;
		setAttr "starTwinkle_Shader.color" -type double3 1 1 1 ;
	}

	if( ($lbs_3dCheck == 0) && ($lbs_fractalCheck == 0) )
	{
		$lbs_solidFractal = `shadingNode -asTexture solidFractal`;
	 	$lbs_place3d = `shadingNode -asUtility place3dTexture`;
		connectAttr -f ($lbs_place3d + ".worldInverseMatrix") ($lbs_solidFractal + ".placementMatrix");
		connectAttr -force ($lbs_solidFractal + ".outColor") ($lbs_starShader + ".incandescence");

		setAttr ($lbs_solidFractal + ".ratio") 1;
		setAttr ($lbs_solidFractal + ".frequencyRatio") 5.745;
		setAttr ($lbs_solidFractal + ".ripplesX") 2;
		setAttr ($lbs_solidFractal + ".ripplesY") 2;
		setAttr ($lbs_solidFractal + ".ripplesZ") 2;
		setAttr ($lbs_solidFractal + ".depthMax") 4.3;
		setAttr ($lbs_solidFractal + ".bias") 0.382;
		setAttr ($lbs_place3d + ".translateY") -288;
		setAttr ($lbs_place3d + ".scaleX") 290;
		setAttr ($lbs_place3d + ".scaleY") 290;
		setAttr ($lbs_place3d + ".scaleZ") 290;

		currentTime 1 ;
		setKeyframe ($lbs_place3d + ".translateZ");
		currentTime 100 ;
		setAttr ($lbs_place3d + ".translateZ") 6;
		setKeyframe ($lbs_place3d + ".translateZ");

		setInfinity -poi linear ($lbs_place3d + ".tz");
	}

	if($lbs_SGCheck == 0)
	{
		$lbs_starSG = `sets -renderable true -noSurfaceShader true -empty -name starTwinkle_ShaderSG`;
		connectAttr -f starTwinkle_Shader.outColor ($lbs_starSG + ".surfaceShader");
	}

		print("---solid fractal: " + $lbs_solidFractal + "\n");
		print("---3d placement node: " + $lbs_place3d + "\n");
		print("---shading group: " + $lbs_starSG + "\n");
	

//-------------------------------------------------------------------------
//end shader creation
//------------------------------------------------------------------------

//-----------------------------------------------------------------------
//creates a sphere for each nurbs surface, renames sphere, generates random scale, adds replace geometry into group
//deletes history, freeze transforms, centers pivot for nurbs surfaces
//uses locator and point constraint to get world space coordinates of nurbs surface and assigns value to replacement geometry
//deletes nurbs surface
//--------------------------------------------------------------------------

	for($i=1;$i<=$surfaceAmount;$i++)
	{
		$lbs_groupSize = $lbs_groupSize + 1;
		polySphere -r 1 -sx $lbs_subDivVal -sy $lbs_subDivVal -ax 0 1 0 -cuv 2 -ch 1;
		rename "pSphere1" ("replace" + $lbs_groupSize);
		rename "polySphere1" ("polyReplace" + $lbs_groupSize);
		hyperShade -assign starTwinkle_ShaderSG;
		$x= rand($lbs_minVal,$lbs_maxVal);
		scale $x$x$x;
		parent ("replace" + $lbs_groupSize) replacementGeometryGrp;
		polySoftEdge -a 180 -ch 1 ("replace" + $lbs_groupSize);

		select ("surface" + $i);
		delete -ch;
		makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
		xform -cp;

	for ($n in `ls -sl`){
		$loc = `spaceLocator -p 0 0 0 `;
		select $n $loc[0];
		$con =`pointConstraint -offset 0 0 0 -weight 1`;
		delete $con;

		$xf=`xform -q -ws -t $loc`;
		delete $loc;
		xform -t $xf[0] $xf[1] $xf[2] ("replace" + $lbs_groupSize);
		delete ("surface" + $i);

		select -cl;
			}
		}
		delete $lbs_paintEffectsStroke;
		hyperShadePanelMenuCommand("hyperShadePanel1", "deleteUnusedNodes");
	}

//-------------------------------------------
//procedure for randomizing replacement geometry
//-------------------------------------------

	global proc randomizeScale()
	{
		string $lbs_groupArray[] = `listRelatives "replacementGeometryGrp"`;
		$lbs_groupSize = `size($lbs_groupArray)`;
		float $lbs_minVal = `floatFieldGrp -query -v1 minVal`;
		float $lbs_maxVal = `floatFieldGrp -query -v1 maxVal`;
	for( $i=1; $i<=$lbs_groupSize; $i++)
	{
		select ("replace" + $i);
		$x= rand($lbs_minVal,$lbs_maxVal);
			scale $x$x$x;
			select -d;
	}
	print ("Min. Value: " + $lbs_minVal + "\n");
	print("Max. Value: " + $lbs_maxVal + "\n");

	}

//------------------------------------------------
//procedure for setting replacement geometry subdivision
//-----------------------------------------------

	global proc repSubDiv()
	{
		string $lbs_groupArray[] = `listRelatives "replacementGeometryGrp"`;
		$lbs_groupSize = `size($lbs_groupArray)`;
		int $lbs_subDiv = `intSliderGrp -query -value subVal`;
	for( $i=1; $i<=$lbs_groupSize; $i++)
	{
		setAttr ("polyReplace" + $i + ".subdivisionsHeight") $lbs_subDiv;
		setAttr ("polyReplace" + $i + ".subdivisionsAxis") $lbs_subDiv;
	}
	print ("Subdivisions: " + $lbs_subDiv + "\n");
	}

//creates a window to input min and max values for randomization
	if(`window -ex lbsPntEffectsWin`) deleteUI lbsPntEffectsWin;

//------------------------------------------------
//space brush selection
//----------------------------------------

	global proc lbs_brush()
	{
	source "/Applications/Autodesk/maya2011/Maya.app/Contents/brushes/galactic/space.mel";
	setAttr "space.tubesPerStep" 1;
	}

//-----------------------------------------------
//-----------------------------------------------
//
//-----------------------------------------------
//-----------------------------------------------

global proc sr_createHighlight()
{
	$surfType = `radioButtonGrp -q -sl sr_surfType`;
	$surfRad = `floatSliderGrp -q -v sr_surfRad`;

	if(`objExists highlightStar_sphere` == 1)
	{
		delete highlightStar_sphere;
	}
	if(`objExists highlightStar_plane` == 1)
	{
		delete highlightStar_plane;
	}
	if(`objExists highlightStar_particle` == 1)
	{
		delete highlightStar_particle;
	}

	if($surfType == 1)
	{
		$sr_sphere = `sphere -p 0 0 0 -ax 0 1 0 -ssw 0 -esw 360 -r $surfRad -d 3 -ut 0 -tol 0.01 -s 8 -nsp 4 -ch 1`;
		objectMoveCommand;
		setAttr ($sr_sphere[0] + ".v") 0;		select -r $sr_sphere[0]  ;
		rename $sr_sphere[0] highlightStar_sphere;
		rename $sr_sphere[1] make_highlightStar_sphere;
	}
	else
	{
		$sr_plane = `nurbsPlane -p 0 0 0 -ax 0 1 0 -w $surfRad -lr 1 -d 3 -u 1 -v 1 -ch 1`; 
		objectMoveCommand;
		setAttr ($sr_plane[0] + ".v") 0;
		select -r $sr_plane[0];
		rename $sr_plane[0] highlightStar_plane;
		rename $sr_plane[1] make_highlightStar_plane;
	}

	$sr_emit = `emitter -type surface  -name "HighlightStars#" -r 2000 -sro 0 -nuv 0 -cye none -cyi 1 -spd 0 -srn 0 -nsp 1 -tsp 0 -mxd 0 -mnd 0 -dx 1 -dy 0 -dz 0 -sp 0` ;
	$sr_particle = `particle`;
	connectDynamic -em $sr_emit[1] $sr_particle;

	setAttr ($sr_emit[1] + ".emitterType") 2;
	setAttr ($sr_emit[1] + ".directionX") 0;
	setAttr ($sr_emit[1] + ".normalSpeed") 0;
	setAttr ($sr_emit[1] + ".awayFromCenter") 0;
	setAttr ($sr_emit[1] + ".awayFromAxis") 0;

	setAttr ($sr_particle[1] + ".lifespan") 10;
	setAttr ($sr_particle[1] + ".startFrame") -2;

	currentTime -2 ;
	setKeyframe ($sr_emit[1] + ".rat");

	currentTime 0 ;
	setKeyframe ($sr_emit[1] + ".rat");

	currentTime 1 ;
	setAttr  ($sr_emit[1] + ".rate") 0;
	setKeyframe  ($sr_emit[1] + ".rat");

	setAttr ($sr_particle[1] + ".particleRenderType") 5;
	addAttr -ln spriteTwistPP -dt doubleArray $sr_particle[1];
	addAttr -ln spriteTwistPP0 -dt doubleArray $sr_particle[1];

	dynExpression -s ($sr_particle[1] + ".spriteTwistPP =" + $sr_particle[1] + ".worldPosition*35;") -rad $sr_particle[1];

	select -r $sr_particle[1] ;

	$shaderExists = 1;

	if(`objExists highlightStar_shader` == 0)
	{
		$sr_lambert = ` shadingNode -asShader lambert`;		$sr_SG = `sets -renderable true -noSurfaceShader true -empty`;		connectAttr -f ($sr_lambert + ".outColor") ($sr_SG + ".surfaceShader");		$sr_file = `shadingNode -asTexture file`;		connectAttr -f ($sr_file + ".outColor") ($sr_lambert + ".color");
		
		source AEfileTemplate.mel;		AEassignTextureCB  ($sr_file + ".fileTextureName")  "Volumes/HD2/ACTIVE/Thrive_General/sourceimages/galaxies/all/galaxysequenceflat0.tga" "Best Guess";		setAttr ($sr_file + ".useHardwareTextureCycling") 1;		setAttr ($sr_file + ".startCycleExtension") 0;		setAttr ($sr_file + ".endCycleExtension") 57;		setAttr ($sr_file + ".useFrameExtension") 1;

		rename $sr_lambert highlightStar_shader;
		rename $sr_SG highlightStar_SG;
		rename $sr_file starReplace_file;
	}	select -r $sr_particle[0];	sets -e -forceElement highlightStar_SG;	addAttr -ln spriteNumPP -dt doubleArray $sr_particle[1];	addAttr -ln spriteNumPP0 -dt doubleArray $sr_particle[1];	dynExpression -s ($sr_particle[1] + ".spriteNumPP = rand(0,57);") -c $sr_particle[1];

	rename $sr_particle[0] highlightStar_particle;

	sr_spriteResize;

}

global proc sr_spriteResize()
{
	$sr_spriteSize = `floatSliderGrp -q -v sr_spriteSize`;

	source AEparticleTemplate.mel;
	AEparticleAddDynamicRenderAttr highlightStar_particleShape;
	setAttr "highlightStar_particleShape.spriteScaleX" $sr_spriteSize;
	setAttr "highlightStar_particleShape.spriteScaleY" $sr_spriteSize;
}

global proc sr_scaleUpdate()
{
	$geoList = `listRelatives -c replacementGeometryGrp`;
	$geoNum = `size($geoList)`;
	$sr_scale = `floatSliderGrp -q -v sr_starScale`;

	for($i=0;$i<$geoNum;$i++)
	{
		setAttr ($geoList[$i] + ".sx") (`getAttr ($geoList[$i] + ".sx")` * $sr_scale);
		setAttr ($geoList[$i] + ".sy") (`getAttr ($geoList[$i] + ".sy")` * $sr_scale);
		setAttr ($geoList[$i] + ".sz") (`getAttr ($geoList[$i] + ".sz")` * $sr_scale);
	}

	floatSliderGrp -e -v 1 sr_starScale;
}
